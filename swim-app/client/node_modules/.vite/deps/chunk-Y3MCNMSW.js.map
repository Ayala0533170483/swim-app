{
  "version": 3,
  "sources": ["../../date-fns/addMonths.js"],
  "sourcesContent": ["import { constructFrom } from \"./constructFrom.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link addMonths} function options.\r\n */\r\n\r\n/**\r\n * @name addMonths\r\n * @category Month Helpers\r\n * @summary Add the specified number of months to the given date.\r\n *\r\n * @description\r\n * Add the specified number of months to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of months to be added.\r\n * @param options - The options object\r\n *\r\n * @returns The new date with the months added\r\n *\r\n * @example\r\n * // Add 5 months to 1 September 2014:\r\n * const result = addMonths(new Date(2014, 8, 1), 5)\r\n * //=> Sun Feb 01 2015 00:00:00\r\n *\r\n * // Add one month to 30 January 2023:\r\n * const result = addMonths(new Date(2023, 0, 30), 1)\r\n * //=> Tue Feb 28 2023 00:00:00\r\n */\r\nexport function addMonths(date, amount, options) {\r\n  const _date = toDate(date, options?.in);\r\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\r\n  if (!amount) {\r\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\r\n    return _date;\r\n  }\r\n  const dayOfMonth = _date.getDate();\r\n\r\n  // The JS Date object supports date math by accepting out-of-bounds values for\r\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\r\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\r\n  // want except that dates will wrap around the end of a month, meaning that\r\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\r\n  // we'll default to the end of the desired month by adding 1 to the desired\r\n  // month and using a date of 0 to back up one day to the end of the desired\r\n  // month.\r\n  const endOfDesiredMonth = constructFrom(options?.in || date, _date.getTime());\r\n  endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);\r\n  const daysInMonth = endOfDesiredMonth.getDate();\r\n  if (dayOfMonth >= daysInMonth) {\r\n    // If we're already at the end of the month, then this is the correct date\r\n    // and we're done.\r\n    return endOfDesiredMonth;\r\n  } else {\r\n    // Otherwise, we now know that setting the original day-of-month value won't\r\n    // cause an overflow, so set the desired day-of-month. Note that we can't\r\n    // just set the date of `endOfDesiredMonth` because that object may have had\r\n    // its time changed in the unusual case where where a DST transition was on\r\n    // the last day of the month and its local time was in the hour skipped or\r\n    // repeated next to a DST transition.  So we use `date` instead which is\r\n    // guaranteed to still have the original time.\r\n    _date.setFullYear(\r\n      endOfDesiredMonth.getFullYear(),\r\n      endOfDesiredMonth.getMonth(),\r\n      dayOfMonth,\r\n    );\r\n    return _date;\r\n  }\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default addMonths;\r\n"],
  "mappings": ";;;;;;AAiCO,SAAS,UAAU,MAAM,QAAQ,SAAS;AAC/C,QAAM,QAAQ,OAAO,MAAM,mCAAS,EAAE;AACtC,MAAI,MAAM,MAAM,EAAG,QAAO,eAAc,mCAAS,OAAM,MAAM,GAAG;AAChE,MAAI,CAAC,QAAQ;AAEX,WAAO;AAAA,EACT;AACA,QAAM,aAAa,MAAM,QAAQ;AAUjC,QAAM,oBAAoB,eAAc,mCAAS,OAAM,MAAM,MAAM,QAAQ,CAAC;AAC5E,oBAAkB,SAAS,MAAM,SAAS,IAAI,SAAS,GAAG,CAAC;AAC3D,QAAM,cAAc,kBAAkB,QAAQ;AAC9C,MAAI,cAAc,aAAa;AAG7B,WAAO;AAAA,EACT,OAAO;AAQL,UAAM;AAAA,MACJ,kBAAkB,YAAY;AAAA,MAC9B,kBAAkB,SAAS;AAAA,MAC3B;AAAA,IACF;AACA,WAAO;AAAA,EACT;AACF;AAGA,IAAO,oBAAQ;",
  "names": []
}
